// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Role {
    AUTHOR
    ADMIN
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    password      String?
    emailVerified DateTime?
    image         String?
    role          Role      @default(AUTHOR)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]    @relation("authorPosts")
    likedPosts    Post[]    @relation("likedPosts")
    comments      Comment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id       String    @id @default(cuid())
    title    String
    body     String
    image    String?
    authorId String
    author   User      @relation("authorPosts", fields: [authorId], references: [id], onDelete: Restrict)
    likedBy  User[]    @relation("likedPosts")
    comments Comment[]

    isPublished Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([isPublished])
}

model Comment {
    id   String @id @default(cuid())
    body String

    commentedBy User?   @relation(fields: [userId], references: [id])
    userId      String?

    commentedPost Post?   @relation(fields: [postId], references: [id])
    postId        String?

    children Comment[] @relation("comment_children")
    parent   Comment?  @relation("comment_children", fields: [parentId], references: [id])
    parentId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
